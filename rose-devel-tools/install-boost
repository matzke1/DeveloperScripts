#!/bin/bash
# Install versions of boost
arg0="${0##*/}"

# boost-1.54 has known bugs that prevent building boost without zlib.
: ${BOOST_VERSIONS:="1.43 1.44 1.45 1.46 1.47 1.48 1.49 1.50 1.51 1.52 1.53 1.54 1.55 1.56 1.57 1.58 1.59 1.60"}
: ${COMPILERS:="gcc-4.4-default gcc-4.6-default gcc-4.7-default gcc-4.7-c++11 gcc-4.8-default gcc-4.8-c++11 gcc-4.9-default gcc-4.9-c++11 llvm-3.5-default"}
: ${TEMPDIR:="$HOME/junk"}
: ${TOOLCHAIN:="$HOME/GS-CAD"}

# chrono is needed by date_time in some versions of boost.
# random and signals are needed by Wt
# the remaining are needed by ROSE
LIBRARIES_1_43_0="       date_time filesystem iostreams program_options random regex signals system thread wave"
LIBRARIES_1_44_0="       date_time filesystem iostreams program_options random regex signals system thread wave"
LIBRARIES_1_45_0="       date_time filesystem iostreams program_options random regex signals system thread wave"
LIBRARIES_1_46_0="       date_time filesystem iostreams program_options random regex signals system thread wave"
LIBRARIES_1_47_0="chrono date_time filesystem iostreams program_options random regex signals system thread wave"
LIBRARIES_1_48_0="chrono date_time filesystem iostreams program_options random regex signals system thread wave"
LIBRARIES_1_49_0="chrono date_time filesystem iostreams program_options random regex signals system thread wave"
LIBRARIES_1_50_0="chrono date_time filesystem iostreams program_options random regex signals system thread wave"
LIBRARIES_1_51_0="chrono date_time filesystem iostreams program_options random regex signals system thread wave"
LIBRARIES_1_52_0="chrono date_time filesystem iostreams program_options random regex signals system thread wave"
LIBRARIES_1_53_0="chrono date_time filesystem iostreams program_options random regex signals system thread wave"
LIBRARIES_1_54_0="chrono date_time filesystem iostreams program_options random regex signals system thread wave"
LIBRARIES_1_55_0="chrono date_time filesystem iostreams program_options random regex signals system thread wave"
LIBRARIES_1_56_0="chrono date_time filesystem iostreams program_options random regex signals system thread wave"
LIBRARIES_1_57_0="chrono date_time filesystem iostreams program_options random regex signals system thread wave"
LIBRARIES_1_58_0="chrono date_time filesystem iostreams program_options random regex signals system thread wave"
LIBRARIES_1_59_0="chrono date_time filesystem iostreams program_options random regex signals system thread wave"
LIBRARIES_1_60_0="chrono date_time filesystem iostreams program_options random regex signals system thread wave"

# Most people disable zlib and bzip2 compressions support because
# the libraries are often not installed. Unfortunately, the way
# to disable this changes over time. zlib is autodetected after 1.53.
IOSTREAM_FLAGS_1_43_0="-sNO_COMPRESSION=1 -sNO_ZLIB=1 -sNO_BZIP2=1"
IOSTREAM_FLAGS_1_44_0="-sNO_COMPRESSION=1 -sNO_ZLIB=1 -sNO_BZIP2=1"
IOSTREAM_FLAGS_1_45_0="-sNO_COMPRESSION=1 -sNO_ZLIB=1 -sNO_BZIP2=1"
IOSTREAM_FLAGS_1_46_0="-sNO_COMPRESSION=1 -sNO_ZLIB=1 -sNO_BZIP2=1"
IOSTREAM_FLAGS_1_47_0="-sNO_COMPRESSION=1 -sNO_ZLIB=1 -sNO_BZIP2=1"
IOSTREAM_FLAGS_1_48_0="-sNO_COMPRESSION=1 -sNO_ZLIB=1 -sNO_BZIP2=1"
IOSTREAM_FLAGS_1_49_0="-sNO_COMPRESSION=1 -sNO_ZLIB=1 -sNO_BZIP2=1"
IOSTREAM_FLAGS_1_50_0="-sNO_COMPRESSION=1 -sNO_ZLIB=1 -sNO_BZIP2=1"
IOSTREAM_FLAGS_1_51_0="-sNO_COMPRESSION=1 -sNO_ZLIB=1 -sNO_BZIP2=1"
IOSTREAM_FLAGS_1_52_0="-sNO_COMPRESSION=1 -sNO_ZLIB=1 -sNO_BZIP2=1"
IOSTREAM_FLAGS_1_53_0="-sNO_COMPRESSION=1 -sNO_ZLIB=1 -sNO_BZIP2=1"
IOSTREAM_FLAGS_1_54_0="-sNO_BZIP2=1" # known bugs
IOSTREAM_FLAGS_1_55_0="-sNO_BZIP2=1"
IOSTREAM_FLAGS_1_56_0="-sNO_BZIP2=1"
IOSTREAM_FLAGS_1_57_0="-sNO_BZIP2=1"
IOSTREAM_FLAGS_1_58_0="-sNO_BZIP2=1"
IOSTREAM_FLAGS_1_59_0="-sNO_BZIP2=1"
IOSTREAM_FLAGS_1_60_0="-sNO_BZIP2=1"

# The name of boost's build system has changed over time.
BOOST_BUILD_COMMAND_1_43_0="./bjam"
BOOST_BUILD_COMMAND_1_44_0="./bjam"
BOOST_BUILD_COMMAND_1_45_0="./bjam"
BOOST_BUILD_COMMAND_1_46_0="./bjam"
BOOST_BUILD_COMMAND_1_47_0="./b2"
BOOST_BUILD_COMMAND_1_48_0="./b2"
BOOST_BUILD_COMMAND_1_49_0="./b2"
BOOST_BUILD_COMMAND_1_50_0="./b2"
BOOST_BUILD_COMMAND_1_51_0="./b2"
BOOST_BUILD_COMMAND_1_52_0="./b2"
BOOST_BUILD_COMMAND_1_53_0="./b2"
BOOST_BUILD_COMMAND_1_54_0="./b2"
BOOST_BUILD_COMMAND_1_55_0="./b2"
BOOST_BUILD_COMMAND_1_56_0="./b2"
BOOST_BUILD_COMMAND_1_57_0="./b2"
BOOST_BUILD_COMMAND_1_58_0="./b2"
BOOST_BUILD_COMMAND_1_59_0="./b2"
BOOST_BUILD_COMMAND_1_60_0="./b2"

# The relative name for user-specific config (see "./b2 --debug-configuration")
BOOST_USERCONFIG_FILE_1_43_0=tools/build/v2/user-config.jam
BOOST_USERCONFIG_FILE_1_44_0=tools/build/v2/user-config.jam
BOOST_USERCONFIG_FILE_1_45_0=tools/build/v2/user-config.jam
BOOST_USERCONFIG_FILE_1_46_0=tools/build/v2/user-config.jam
BOOST_USERCONFIG_FILE_1_47_0=tools/build/v2/user-config.jam
BOOST_USERCONFIG_FILE_1_48_0=tools/build/v2/user-config.jam
BOOST_USERCONFIG_FILE_1_49_0=tools/build/v2/user-config.jam
BOOST_USERCONFIG_FILE_1_50_0=tools/build/v2/user-config.jam
BOOST_USERCONFIG_FILE_1_51_0=tools/build/v2/user-config.jam
BOOST_USERCONFIG_FILE_1_52_0=tools/build/v2/user-config.jam
BOOST_USERCONFIG_FILE_1_53_0=tools/build/v2/user-config.jam
BOOST_USERCONFIG_FILE_1_54_0=tools/build/v2/user-config.jam
BOOST_USERCONFIG_FILE_1_55_0=tools/build/v2/user-config.jam
BOOST_USERCONFIG_FILE_1_56_0=tools/build/src/user-config.jam
BOOST_USERCONFIG_FILE_1_57_0=tools/build/src/user-config.jam
BOOST_USERCONFIG_FILE_1_58_0=tools/build/src/user-config.jam
BOOST_USERCONFIG_FILE_1_59_0=tools/build/src/user-config.jam
BOOST_USERCONFIG_FILE_1_60_0=tools/build/src/user-config.jam


libraries() {
    local vs="$1" with_commas="$2"
    if [ "$with_commas" = "" ]; then
	eval 'echo $LIBRARIES_'$vs
    else
	eval 'echo $LIBRARIES_'$vs |tr ' ' ','
    fi
}

iostream_flags() {
    local vs="$1"
    eval 'echo $IOSTREAM_FLAGS_'$vs
}

build_command() {
    local vs="$1"
    eval 'echo $BOOST_BUILD_COMMAND_'$vs
}

user_config_file() {
    local vs="$1"
    eval 'echo $BOOST_USERCONFIG_FILE_'$vs
}

# Boost version string. Converts "1.50" -> "1_50_0"
boost_version_string() {
    perl -e '$_=shift;s/\./_/g; 1==/_/ and $_.="_0"; print' "$1"
}

# Download source tarball into current working directory
get_source() {
    local version="$1" destination="$2"
    local vs=$(boost_version_string "$version")
    if [ ! -f "$HOME/Downloads/boost_$vs.tar.bz2" ]; then
	wget -O "$HOME/Downloads/boost_$vs.tar.bz2" \
	    "http://sourceforge.net/projects/boost/files/boost/$version.0/boost_$vs.tar.bz2/download"
    fi
    ln -sf "$HOME/Downloads/boost_$vs.tar.bz2" "$destination"
}

is_installed() {
    local prefix="$1"
    local hdr="$prefix/include/boost/version.hpp"
    if [ ! -r "$hdr" ]; then
	echo "$arg0: failed to install (missing $hdr)" >&2
	return 1
    fi
    for f in $(libraries); do
	lib="$prefix/lib/libboost_$f.so"
	if [ ! -r "$lib" ]; then
	    echo "$arg0: failed to install (missing $lib)" >&2
	    return 1
	fi
    done
    return 0
}

for version in $BOOST_VERSIONS; do
    for compiler in $COMPILERS; do
	(figlet -c "$version with $compiler" || banner "$version with $compiler") 2>/dev/null

	# Given a couple RMC_* variables, figure out the rest
	eval $(rmc clear)
	eval $(RMC_RMC_TOOLCHAIN="$TOOLCHAIN" RMC_CXX_NAME="$compiler" RMC_BOOST_VERSION="$version" rmc resolve boost)
	[ "$RMC_CXX_VENDOR" = "" -o "$RMC_CXX_VERSION" = "" -o "$RMC_CXX_LANGUAGE" = "" ] && continue;
	[ "$RMC_BOOST_ROOT" = "" ] && continue

	vs=$(boost_version_string "$version")
	logfile="boost-${version}_${RMC_CXX_VENDOR}-${RMC_CXX_VERSION}-${RMC_CXX_LANGUAGE}.log"
	date >"$logfile"
	echo "boost-$version ($vs) for $RMC_BOOST_ROOT"
	echo "log file is " $(rmc realpath "$logfile")
	if is_installed "$RMC_BOOST_ROOT" 2>/dev/null; then
	    echo "already installed; skipping"
	    echo "already installed; skipping" >>"$logfile"
	    continue
	fi

	mkdir -p "$TEMPDIR"
	(
	    set -e
	    cd "$TEMPDIR"

	    # Download
	    echo "downloading boost-$version..." >&2
	    tarball="boost_$vs.tar.bz2"
	    get_source "$version" "$tarball"
	    if [ ! -f "$tarball" ]; then
		echo "$arg0: couldn't download $tarball" >&2
		exit 1
	    fi

	    # Untar
	    builddir="boost_$vs"
	    echo "unpacking into $builddir..." >&2
	    rm -rf "$builddir"
	    tar xf "$tarball"
	    if [ ! -d "$builddir" ]; then
		echo "$arg0: unpacking failed for $tarball into $builddir" >&2
		exit 1
	    fi
	    cd "$builddir"

	    # Configure
	    user_jam=$(user_config_file "$vs")
	    toolset="$RMC_CXX_VENDOR"
	    case "$RMC_CXX_VENDOR" in
		llvm)
		    toolset=clang
		    ;;
	    esac
	    echo "using $toolset : $RMC_CXX_VERSION : $RMC_CXX_NAME $RMC_CXX_SWITCHES ;" > "$user_jam"
	    if [ ! -r "$user_jam" ]; then
		echo "$arg0: cannot create Boost.Build user Jam file: $user_jam" >&2
		exit 1
	    fi

	    # Build
	    echo "bootstrap..." >&2
	    (set -x; ./bootstrap.sh --prefix="$RMC_BOOST_ROOT" --with-libraries=$(libraries "$vs" COMMAS))

	    echo "building..." >&2
	    iosflags=$(iostream_flags "$vs")
	    (set -x; $(build_command "$vs") --prefix="$RMC_BOOST_ROOT" $iosflags toolset=$toolset -d+2)

	    # Install
	    echo "installing..." >&2
	    (set -x; $(build_command "$vs") --prefix="$RMC_BOOST_ROOT" $iosflags toolset=$toolset -d+2 install)
	    is_installed "$RMC_BOOST_ROOT" || exit 1

	) >>"$logfile"
    done
done
