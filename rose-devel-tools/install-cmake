#!/bin/bash
# Install versions of CMake
arg0="${0##*/}"

# Versions of cmake to install if they aren't installed already.
: ${CMAKE_VERSIONS:="2.8.12-rc4 3.1.0"}

# Space-separated list of compilers to use as the "rmc_compiler" value.  These can be executable names or
# VENDOR-VERSION-LANGUAGE triplets.
: ${COMPILERS:="g++"}

# Directory where we build stuff. Using a local directory instead of NFS will speed things up.
: ${TEMPDIR:="$HOME/junk"}

# RMC toolchain directory where cmake will be installed.
: ${TOOLCHAIN:="$HOME/GS-CAD"}

# If non-empty, then re-install cmake even if it seems to already be installed.
: REINSTALL



# Download source tarball into current working directory
get_source() {
    local version="$1" destination="$2"
    if [ ! -f "$HOME/Downloads/cmake-$version.tar.gz" ]; then
	#wget -O "$HOME/Downloads/doxygen-$version.src.tar.gz" \
	#    "ftp://ftp.stack.nl/pub/users/dimitri/doxygen-$version.src.tar.gz"
	echo "$arg0: download URL for cmake is not available" >&2
	exit 1
    fi
    ln -sf "$HOME/Downloads/cmake-$version.tar.gz" "$destination"
}

is_installed() {
    local prefix="$1"
    local bin="$prefix/bin/cmake"
    if [ ! -x "$bin" ]; then
	echo "$arg0: failed to install (missing $bin)" >&2
	return 1
    fi
    return 0
}

for cmake_version in $CMAKE_VERSIONS; do
    (figlet -c "$cmake_version" || banner "$cmake_version") 2>/dev/null

    eval $(rmc clear)
    eval $(rmc resolve parallelism)
    eval $(RMC_RMC_TOOLCHAIN="$TOOLCHAIN" RMC_CMAKE_VERSION="$cmake_version" rmc resolve cmake)
    [ "$RMC_CMAKE_ROOT" = "" ] && continue

    logfile="cmake-$cmake_version.log"
    date >"$logfile"
    echo "cmake-$cmake_version for $RMC_CMAKE_ROOT"
    echo "log file is " $(rmc realpath "$logfile")
    if [ "$REINSTALL" != "" ]; then
	: install regardless of whether it is already installed
    elif is_installed "$RMC_CMAKE_ROOT" 2>/dev/null; then
	echo "already installed; skipping"
	echo "already installed; skipping" >>"$logfile"
	continue
    fi

    temporary_prefix="$RMC_CMAKE_ROOT-$(date '+%Y%m%d')"

    mkdir -p "$TEMPDIR"
    (
	cd "$TEMPDIR" || exit 1

	echo "downloading cmake-$cmake_version..." >&2
	tarball="cmake-$cmake_version.tar.gz"
	get_source "$cmake_version" "$tarball"
	if [ ! -f "$tarball" ]; then
	    echo "$arg0: couldn't download $tarball" >&2
	else
	    builddir="cmake-$cmake_version"
	    echo "unpacking into $builddir..." >&2
	    rm -rf "$builddir"
	    tar xf "$tarball" || exit 1
	    if [ ! -d "$builddir" ]; then
		echo "$arg0: unpacking failed for $tarball into $builddir" >&2
	    else
		cd "$builddir" || exit 1
		./bootstrap --parallel=$RMC_PARALLELISM --prefix="$temporary_prefix"
		make -j$RMC_PARALLELISM
		make -j$RMC_PARALLELISM install
	    fi
	fi

	# Remove previous installation if any (only need to do this if the old installation is a directory rather
	# than a symlink.
	is_installed "$temporary_prefix" || exit 1
	if [ ! -h "$RMC_CMAKE_ROOT" -a -d "$RMC_CMAKE_ROOT" ]; then
	    rm -rf "$RMC_CMAKE_ROOT.bak"
	    mv "$RMC_CMAKE_ROOT" "$RMC_CMAKE_ROOT.bak"
	else
	    rm -f "$RMC_CMAKE_ROOT"
	fi

	# Link in the new installation. The "-r" switch of "ln" is not always available, so do it the hard way.
	if false; then
	    ln -sfr "$temporary_prefix" "$RMC_CMAKE_ROOT"
	else
	    temporary_base=$(basename "$temporary_prefix")
	    real_base=$(basename "$RMC_CMAKE_ROOT")
	    dir="${temporary_prefix%/$temporary_base}"
	    (cd "$dir" && ln -sf "$temporary_base" "$real_base")
	fi
	is_installed "$RMC_CMAKE_ROOT" || exit 1


    ) |tee -a "$logfile"

    # Save the log file in the installation directory
    mv "$logfile" "$RMC_CMAKE_ROOT/installation.log"
done
