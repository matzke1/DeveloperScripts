#!/bin/bash
# Install versions of CMake
arg0="${0##*/}"

: ${CMAKE_VERSIONS:="2.8.12-rc4 3.1.0"}
: ${TEMPDIR:="$HOME/junk"}
: ${COMPILERS:="g++"}

# Download source tarball into current working directory
get_source() {
    local version="$1" destination="$2"
    if [ ! -f "$HOME/Downloads/cmake-$version.tar.gz" ]; then
	#wget -O "$HOME/Downloads/doxygen-$version.src.tar.gz" \
	#    "ftp://ftp.stack.nl/pub/users/dimitri/doxygen-$version.src.tar.gz"
	echo "$arg0: download URL for cmake is not available" >&2
	exit 1
    fi
    ln -sf "$HOME/Downloads/cmake-$version.tar.gz" "$destination"
}

is_installed() {
    local prefix="$1"
    local bin="$prefix/bin/cmake"
    if [ ! -x "$bin" ]; then
	echo "$arg0: failed to install (missing $bin)" >&2
	return 1
    fi
    return 0
}

for cmake_version in $CMAKE_VERSIONS; do
    (figlet -c "$cmake_version" || banner "$cmake_version") 2>/dev/null

    eval $(rmc clean)
    eval $(rmc resolve parallelism)
    eval $(RMC_CMAKE_VERSION="$cmake_version" rmc resolve cmake)
    [ "$RMC_CMAKE_ROOT" = "" ] && continue

    logfile="cmake-$cmake_version.log"
    date >"$logfile"
    echo "cmake-$cmake_version for $RMC_CMAKE_ROOT"
    echo "log file is " $(rmc realpath "$logfile")
    if is_installed "$RMC_CMAKE_ROOT" 2>/dev/null; then
	echo "already installed; skipping"
	echo "already installed; skipping" >>"$logfile"
	continue
    fi

    mkdir -p "$TEMPDIR"
    (
	cd "$TEMPDIR" || exit 1

	echo "downloading cmake-$cmake_version..." >&2
	tarball="cmake-$cmake_version.tar.gz"
	get_source "$cmake_version" "$tarball"
	if [ ! -f "$tarball" ]; then
	    echo "$arg0: couldn't download $tarball" >&2
	else
	    builddir="cmake-$cmake_version"
	    echo "unpacking into $builddir..." >&2
	    rm -rf "$builddir"
	    tar xf "$tarball" || exit 1
	    if [ ! -d "$builddir" ]; then
		echo "$arg0: unpacking failed for $tarball into $builddir" >&2
	    else
		cd "$builddir" || exit 1
		./bootstrap --parallel=$RMC_PARALLELISM --prefix="$RMC_CMAKE_ROOT"
		make -j$RMC_PARALLELISM
		make -j$RMC_PARALLELISM install
	    fi
	fi
    ) |tee -a "$logfile"
done
