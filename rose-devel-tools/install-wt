#!/bin/bash
# Install versions of the Wt web toolkit
arg0="${0##*/}"

# Space-separated versions of Wt to install if they're not installed already
: ${WT_VERSIONS:="3.3.3 3.3.4 3.3.5"}

# Space-separated versions of boost against which to compile Wt if that combination isn't installed already.
: ${BOOST_VERSIONS:="all"}

# Space-separated list of compilers to use as the "rmc_compiler" value.  These can be executable names or
# VENDOR-VERSION-LANGUAGE triplets.
: ${COMPILERS:="g++"}

# Directory where we build stuff. Using a local directory instead of NFS will speed things up.
: ${TEMPDIR:="$HOME/junk"}

# Which cmake to use? This can be the word "system", a full path to the cmake executable, or an RMC-known version number.
: ${CMAKE_VERSION:=system}

# RMC toolchain directory where Wt will be installed.
: ${TOOLCHAIN:="$RMC_RMC_TOOLCHAIN"}
: ${TOOLCHAIN:="$HOME/GS-CAD"}

# If non-empty, then re-install wt even if it seems to already be installed.
: REINSTALL



# Download source tarball into current working directory
get_source() {
    local version="$1" destination="$2"
    local file="$HOME/Downloads/wt-$version.tar.gz"
    if [ ! -f "$HOME/Downloads/wt-$version.tar.gz" ]; then
	if [ "$version" = "3.3.5" ]; then
	    wget -O "$HOME/Downloads/wt-$version.tar.gz" \
		 "https://github.com/kdeforche/wt/archive/3.3.5.tar.gz"
	else
            wget -O "$HOME/Downloads/wt-$version.tar.gz" \
		 "http://prdownloads.sourceforge.net/witty/wt-$version.tar.gz?download"
	fi
    fi
    ln -sf "$HOME/Downloads/wt-$version.tar.gz" "$destination"
}

is_installed() {
    local prefix="$1"
    local hdr="$prefix/include/Wt/WConfig.h"
    if [ ! -r "$hdr" ]; then
        echo "$arg0: failed to install (missing $hdr)" >&2
        return 1
    fi
    local lib="$prefix/lib/libwt.so"
    if [ ! -r "$lib" ]; then
        echo "$arg0: failed to install (missing $lib)" >&2
        return 1
    fi
    return 0
}

if [ "$BOOST_VERSIONS" = "all" ]; then
    echo "$arg0: looking for boost versions (this may take a while)..."
    BOOST_VERSIONS=$(RMC_RMC_TOOLCHAIN="$TOOLCHAIN" rmc list --terse boost)
    echo "$arg0: boost versions: $BOOST_VERSIONS"
fi

for wt_version in $WT_VERSIONS; do
    for boost_version in $BOOST_VERSIONS; do
        for compiler in $COMPILERS; do
            (figlet -c "$wt_version w/boost-$boost_version" || \
             banner "$yaml_version w/boost-$boost_version") 2>/dev/null

            # Set up the RMC_* variables
	    eval $(rmc clear)
	    export RMC_RMC_TOOLCHAIN="$TOOLCHAIN"
	    eval $(rmc resolve parallelism)
	    eval $(RMC_BUILD_SYSTEM=cmake RMC_CMAKE_VERSION="$CMAKE_VERSION" rmc resolve --require cmake)
            eval $(RMC_CXX_NAME="$compiler" RMC_BOOST_VERSION="$boost_version" RMC_WT_VERSION="$wt_version" rmc resolve wt)
	    [ "$RMC_CMAKE_FILE" = "" ] && continue
	    [ "$RMC_CXX_NAME" = "" ] && continue
	    [ "$RMC_WT_ROOT" = "" ] && continue
	    export LD_LIBRARY_PATH=$(rmc vector prepend_or_leave "$RMC_RMC_LIBDIRS" : "$LD_LIBRARY_PATH")

            logfile="wt-$wt_version.log"
            date >"$logfile"
            echo "wt-$wt_version for $RMC_WT_ROOT"
            echo "log file is " $(rmc realpath "$logfile")
	    if [ "$REINSTALL" != "" ]; then
		: install even if it looks to be installed
            elif is_installed "$RMC_WT_ROOT" 2>/dev/null; then
                echo "already installed; skipping"
                echo "already installed; skipping" >>"$logfile"
                continue
            fi

	    temporary_prefix="$RMC_WT_ROOT-$(date '+%Y%m%d')"

            mkdir -p "$TEMPDIR"
            (
                cd "$TEMPDIR" || exit 1

                echo "downloading wt-$wt_version..." >&2
                tarball="wt-$wt_version.tar.gz"
                get_source "$wt_version" "$tarball"
                if [ ! -f "$tarball" ]; then
                    echo "$arg0: couldn't download $tarball" >&2
                else
                    builddir="wt-$wt_version"
                    echo "unpacking into $builddir..." >&2
                    rm -rf "$builddir"
                    tar xf "$tarball" || exit 1
                    if [ ! -d "$builddir" ]; then
                        echo "$arg0: unpacking failed for $tarball into $builddir" >&2
                    else
                        mkdir "$builddir/_build" || exit 1
                        cd "$builddir/_build" || exit 1

                        eval $(rmc resolve --require cmake)
                        "$RMC_CMAKE_FILE" .. \
                              -DCMAKE_CXX_COMPILER="$RMC_CXX_NAME" \
                              -DCMAKE_CXX_FLAGS="$RMC_CXX_SWITCHES" \
                              -DBOOST_ROOT="$RMC_BOOST_ROOT" \
                              -DWT_WRASTERIMAGE_IMPLEMENTATION=GraphicsMagick \
                              -DCMAKE_INSTALL_PREFIX="$temporary_prefix" \
                              -DCONFIGDIR="$temporary_prefix/etc/wt"

                        make -j$RMC_PARALLELISM
                        make install
                        is_installed "$temporary_prefix" || exit 1
                    fi

		    # Remove previous installation if any (only need to do this if the old installation is a directory rather
		    # than a symlink.
		    if [ ! -h "$RMC_WT_ROOT" -a -d "$RMC_WT_ROOT" ]; then
			rm -rf "$RMC_WT_ROOT.bak"
			mv "$RMC_WT_ROOT" "$RMC_WT_ROOT.bak"
		    else
			rm -f "$RMC_WT_ROOT"
		    fi

		    # Link in the new installation. The "-r" switch of "ln" is not always available, so do it the hard way.
		    if false; then
			ln -sfr "$temporary_prefix" "$RMC_WT_ROOT"
		    else
			temporary_base=$(basename "$temporary_prefix")
			real_base=$(basename "$RMC_WT_ROOT")
			dir="${temporary_prefix%/$temporary_base}"
			(cd "$dir" && ln -sf "$temporary_base" "$real_base")
		    fi
		    is_installed "$RMC_WT_ROOT" || exit 1
                fi
            ) |tee -a "$logfile"
	    mv "$logfile" "$RMC_WT_ROOT/installation.log"
	done
    done
done
