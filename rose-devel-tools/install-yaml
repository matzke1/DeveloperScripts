#!/bin/bash
# Install versions of the C++ YAML library
arg0="${0##*/}"

YAML_VERSIONS="0.5.1"
YAML_BASE="$HOME/GS-CAD/yaml"

BOOST_VERSIONS="all"
BOOST_BASE="$HOME/GS-CAD/boost"

COMPILER="g++"
TEMPDIR="$HOME/junk"

# Copied from rmc script
RMC_CXX="$COMPILER"
RMC_CXX_VERSION=
RMC_CXX_BASENAME=
resolve_compiler() {
    RMC_CXX_BASENAME=$(basename "$RMC_CXX" |perl -pe 's/-\d+(\.\d+)+//')

    local real_name=$(realpath $(which "$RMC_CXX"))
    if [ "$real_name" = "" ]; then
	echo "$arg0: cannot find compiler: $RMC_CXX" >&2
	exit 1
    fi

    local vers=$("$RMC_CXX" --version |\
                        head -n1 |\
                        perl -ne '/(\d+(\.\d+){1,2})$/ && print $1')
    if [ "$vers" = "" ]; then
        echo "$arg0: no compiler version number for '$RMC_CXX'" >&2
        exit 1
    fi
    RMC_CXX_VERSION="$vers"
}

# Download source tarball into current working directory
get_source() {
    local version="$1" destination="$2"
    ln -sf "$HOME/Downloads/yaml-cpp-$version.tar.gz" "$destination"
}

is_installed() {
    local prefix="$1"
    local hdr="$prefix/include/yaml-cpp/yaml.h"
    if [ ! -r "$hdr" ]; then
	echo "$arg0: failed to install (missing $hdr)" >&2
	return 1
    fi
    local lib="$prefix/lib/libyaml-cpp.a"
    if [ ! -r "$lib" ]; then
	echo "$arg0: failed to install (missing $lib)" >&2
	return 1
    fi
    return 0
}

if [ "$BOOST_VERSIONS" = "all" ]; then
    vnames=()
    for f in $(cd $BOOST_BASE && ls); do
	if [ $(find "$BOOST_BASE/$f" -name version.hpp |wc -l) -gt 0 ]; then
	    vnames=("${vnames[@]}" "$f")
	fi
    done
    BOOST_VERSIONS="${vnames[@]}"
    echo "$arg0: available boost versions: $BOOST_VERSIONS"
fi

resolve_compiler
for yaml_version in $YAML_VERSIONS; do
    for boost_version in $BOOST_VERSIONS; do
	(figlet -c "$yaml_version w/boost-$boost_version" || \
	 banner "$yaml_version w/boost-$boost_version") 2>/dev/null
	prefix="$YAML_BASE/$yaml_version/boost-$boost_version/$RMC_CXX_BASENAME-$RMC_CXX_VERSION"
	logfile="yaml-cpp-$yaml_version.log"
	date >"$logfile"
	echo "yaml-cpp-$yaml_version for $prefix"
	echo "log file is " $(realpath -e "$logfile")
	if is_installed "$prefix" 2>/dev/null; then
	    echo "already installed; skipping"
	    echo "already installed; skipping" >>"$logfile"
	    continue
	fi

	mkdir -p "$TEMPDIR"
	(
	    set -e
	    cd "$TEMPDIR"

	    echo "downloading yaml-cpp-$yaml_version..." >&2
	    tarball="yaml-cpp-$yaml_version.tar.gz"
	    get_source "$yaml_version" "$tarball"
	    if [ ! -f "$tarball" ]; then
		echo "$arg0: couldn't download $tarball" >&2
		exit 1
	    fi

	    builddir="yaml-cpp-$yaml_version"
	    echo "unpacking into $builddir..." >&2
	    rm -rf "$builddir"
	    tar xf "$tarball"
	    if [ ! -d "$builddir" ]; then
		echo "$arg0: unpacking failed for $tarball into $builddir" >&2
		exit 1
	    fi

	    mkdir "$builddir/_build"
	    cd "$builddir/_build"

	    boost_root="$BOOST_BASE/$boost_version/$RMC_CXX_BASENAME-$RMC_CXX_VERSION"
	    cmake .. -DBOOST_ROOT="$boost_root" -DCMAKE_INSTALL_PREFIX="$prefix"

	    make

	    make install
	    is_installed "$prefix" || exit 1

	) |tee -a "$logfile"
    done
done
