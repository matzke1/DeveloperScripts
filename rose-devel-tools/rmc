#!/bin/bash

# ROSE meta configuration.  This script permits meta-config information to be stored in a build directory and easily
# edited. ROSE is then configured and built from this meta-config info.  This script also sets up environments for
# running various build commands, or can also run thse commands itself.
#
# Synopsis:
#
#    $ mkdir $ROSE_BUILD
#    $ cd $ROSE_BUILD
#    $ rmc init $ROSE_SOURCE  # initialize meta-config info
#    $ rmc config             # run configure or cmake
#    $ rmc make               # run parallel build
#    $ rmc                    # start a subshell

arg0="${0##*/}"

COMMAND=
CONFIG_BASE_NAME=".rmc-main.cfg"
export RMC_RMC_VERSION="0.1.0"


# Load additional functionality. These files live in the same directory as this script.
arg0_realname=$(realpath $0)
source ${arg0_realname%/*}/rmc-support/functions.sh || exit 1

# RMC modules
source ${arg0_realname%/*}/rmc-support/modules/autoconf.sh    || exit 1
source ${arg0_realname%/*}/rmc-support/modules/boost.sh       || exit 1
source ${arg0_realname%/*}/rmc-support/modules/build.sh       || exit 1
source ${arg0_realname%/*}/rmc-support/modules/compiler.sh    || exit 1
source ${arg0_realname%/*}/rmc-support/modules/cmake.sh       || exit 1
source ${arg0_realname%/*}/rmc-support/modules/dlib.sh        || exit 1
source ${arg0_realname%/*}/rmc-support/modules/doxygen.sh     || exit 1
source ${arg0_realname%/*}/rmc-support/modules/edg.sh         || exit 1
source ${arg0_realname%/*}/rmc-support/modules/jvm.sh         || exit 1
source ${arg0_realname%/*}/rmc-support/modules/magic.sh       || exit 1
source ${arg0_realname%/*}/rmc-support/modules/misc.sh        || exit 1
source ${arg0_realname%/*}/rmc-support/modules/os.sh          || exit 1
source ${arg0_realname%/*}/rmc-support/modules/parallelism.sh || exit 1
source ${arg0_realname%/*}/rmc-support/modules/python.sh      || exit 1
source ${arg0_realname%/*}/rmc-support/modules/qt.sh          || exit 1
source ${arg0_realname%/*}/rmc-support/modules/readline.sh    || exit 1
source ${arg0_realname%/*}/rmc-support/modules/rose.sh        || exit 1
source ${arg0_realname%/*}/rmc-support/modules/rosebld.sh     || exit 1
source ${arg0_realname%/*}/rmc-support/modules/rosesrc.sh     || exit 1
source ${arg0_realname%/*}/rmc-support/modules/sqlite.sh      || exit 1
source ${arg0_realname%/*}/rmc-support/modules/wt.sh          || exit 1
source ${arg0_realname%/*}/rmc-support/modules/yaml.sh        || exit 1
source ${arg0_realname%/*}/rmc-support/modules/yices.sh       || exit 1


########################################################################################################################
#                        ____  _          _ _ 
#                       / ___|| |__   ___| | |
#                       \___ \| '_ \ / _ \ | |
#                        ___) | | | |  __/ | |
#                       |____/|_| |_|\___|_|_|
#
########################################################################################################################

do_shell_help() {
    echo "usage: $arg0 [SWITCHES] [shell] SHELL_COMMAND..."
    echo "       $arg0 [SWITCHES]"
    echo "    Runs the shell command (or a shell) in an environment that's been set up for"
    echo "    building ROSE.  If the shell command's first word is something that this"
    echo "    script recognizes as a subcommand, then insert the word 'shell' before the"
    echo "    shell command."
}

do_shell() {
    rmc_load_configuration
    export PS1_STACK="${RMC_ROSEBLD_ROOT##*/} $PS1_STACK"

    if [ "$#" -eq 0 ]; then
        exec $SHELL
    else
        exec "$@"
    fi
    echo "$arg0: exec failed:" "$@" >&2
    exit 1
}

########################################################################################################################
#                        ____                 _
#                       |  _ \ ___  ___  ___ | |_   _____
#                       | |_) / _ \/ __|/ _ \| \ \ / / _ \
#                       |  _ <  __/\__ \ (_) | |\ V /  __/
#                       |_| \_\___||___/\___/|_| \_/ \___|
#
########################################################################################################################

do_resolve_help() {
    echo "usage: $arg0 $COMMAND [--require] WHAT"
    echo "  This command prints environment variables without reading any config file. It"
    echo "  can be used to query things like directory names when building ROSE software"
    echo "  dependencies."
    
}

do_resolve() {
    local require=
    while [ "$#" -gt 0 ]; do
        case "$1" in
            -h|--help)
                do_resolve_help
                exit 0
                ;;
            --require)
                require=yes
                shift
                ;;
            -*)
                echo "$arg0 $COMMAND: unknown switch: $1" >&2
                exit 1
                ;;
            *)
                break
                ;;
        esac
    done
    if [ "$#" -ne 1 ]; then
        echo "$arg0 $COMMAND: incorrect usage; see --help" >&2
        exit 1
    fi
    local pkg="$1"
    if [ "$require" != "" ]; then
        eval 'rmc_'$pkg'_check'
    else
        eval 'rmc_'$pkg'_resolve'
    fi
    export |sed -n '/^declare -x RMC_[a-zA-Z_0-9]*=/ s/declare -x //p'
}


########################################################################################################################
#                        ___       _ _
#                       |_ _|_ __ (_) |_
#                        | || '_ \| | __|
#                        | || | | | | |_
#                       |___|_| |_|_|\__|
#
########################################################################################################################

do_init_help() {
    echo "usage: $arg0 $COMMAND [SWITCHES] SOURCE_DIR"
    echo "    Initializes the current working directory so it can be used to compile ROSE."
    echo "    If a configuration file already exists, ($CONFIG_BASE_NAME), then"
    echo "    this command refuses to run unless the '--force' flag is also given. The"
    echo "    $CONFIG_BASE_NAME file is created in the CWD by copying it from"
    echo "    ~/.rmc-defaults.cfg or by creating it from scratch and then the user's editor"
    echo "    is invoked."
    echo
    echo "  Switches:"
    echo "    --force | -f"
    echo "      Force creation of a new configuration even though this build directory"
    echo "      seems to already be initialized."
    echo
    echo "    --instructions"
    echo "    --no-instructions | -s"
    echo "      When creating a new configuration file, either include comments about what"
    echo "      each line does and how to use it, or create a mostly comment-free file."
}

do_init() {

    # Parse command-line
    local force= show_instructions=yes
    while [ "$#" -gt 0 ]; do
        case "$1" in
            --help|-h)
                do_init_help
                exit 0
                ;;
            --force|-f)
                force=yes
                shift
                ;;
            --instructions)
                show_instructions=yes
                shift
                ;;
            --no-instructions|-s)
                show_instructions=
                shift
                ;;
            -*)
                echo "$arg0 $COMMAND: unknown switch: '$1' (see $arg0 $COMMAND --help)" >&2
                exit 1
                ;;
            *)
                break
                ;;
        esac
    done
    if [ "$#" -ne 1 ]; then
        do_init_help >&2
        exit 1
    fi

    # Check the source directory
    local srcdir="$1"
    if [ ! -d "$srcdir" ]; then
        echo "$arg0 $COMMAND: source directory does not exist: $srcdir" >&2
        exit 1
    fi
    if [ ! -e "$srcdir/src/frontend/BinaryLoader/BinaryLoader.h" ]; then
        echo "$arg0 $COMMAND: directory does not appear to be top of ROSE source code: $srcdir" >&2
        exit 1
    fi
    srcdir=$(rmc_realpath "$srcdir")

    # Create and edit the config file
    if [ -e "$CONFIG_BASE_NAME" -a "$force" = "" ]; then
        echo "$arg0 init: CWD appears to be set up already; use '--force' to override" >&2
        exit 1
    fi
    if [ -e "$HOME/.rmc-defaults.cfg" ]; then
        cp "$HOME/.rmc-defaults.cfg" "$CONFIG_BASE_NAME" || exit 1
    else
        (
            echo "# ROSE meta config (auto generated) -*- shell-script -*-"
            echo "#-------------------------------------------------------"
            echo "rmc_rosesrc $srcdir"
            echo
            echo "#----------------------------------"
            echo "#         General stuff"
            echo "#----------------------------------"
            echo

            if [ "$show_instructions" != "" ]; then
                echo "# Build system is either 'cmake' or 'autoconf'"
            fi
            echo "rmc_build        autoconf"

            if [ "$show_instructions" != "" ]; then
                echo
                echo "# Installation prefix for 'make install'. The argument is"
                echo "#   absolute path   -- install into the specified path"
                echo "#   relative path   -- installation prefix w.r.t. build directory"
                echo "#   'yes' (default) -- build-relative directory named 'installed'"
                echo "#   'no'            -- installation is not supported"
            fi
            echo "rmc_install      yes"

            if  [ "$show_instructions" != "" ]; then
                echo
                echo "# Maximum parallelism for things like 'make' commands."
                echo "#   positive number -- limit parallelism to specified value"
                echo "#   'system' (dflt) -- use number of compute cores as the limit"
                echo "#   'unlimited'     -- no hard limit on parallelism"
            fi
            echo "rmc_parallelism  system"

            if [ "$show_instructions" != "" ]; then
                echo
                echo "# Language frontends. The argument should be a comma-separated list"
                echo "# of language names with no intervening white space.  Possible languages"
                echo "# are 'all', 'non', 'binaries', 'c', 'c++', 'cuda', 'fortran', 'java'"
                echo "# 'x10', 'opencl', 'php', 'matlab', and 'python'."
            fi
            echo "rmc_languages    all"

            echo
            echo
            echo "#----------------------------------"
            echo "#         Compiling"
            echo "#----------------------------------"
            echo

            if [ "$show_instructions" != "" ]; then
                echo "# Comand that runs the C++ compiler.  Relative names are searched"
                echo "# according to the \$PATH environment variable."
            fi
            echo "rmc_compiler     g++"

            if [ "$show_instructions" != "" ]; then
                echo
                echo "# Whether ('yes' or 'no') to generate symbol tables useful for debugging"
                echo "# with tools like GDB. The default is 'yes'. Debugging support and"
                echo "# optimization are orthogonal issues."
            fi
            echo "rmc_debug        yes"

            if  [ "$show_instructions" != "" ]; then
                echo
                echo "# Whether ('yes' or 'no') to add optimization switches to compiler"
                echo "# commands. If 'no' then optimizations are explicitly turned off, which"
                echo "# can be useful for debugging since C++ statements will generally have"
                echo "# the same order as the binary instructions."
            fi
            echo "rmc_optimize     yes"

            if [ "$show_instructions" != "" ]; then
                echo
                echo "# Whether ('yes' or 'no') to cause the C++ compiler to emit warnings"
                echo "# about questionable source code."
            fi
            echo "rmc_warnings     yes"

            if [ "$show_instructions" != "" ]; then
                echo
                echo "# Behavior of Sawyer ASSERT_... macros."
                echo "#   'abort' (dflt)-- message emitted, then abort process"
                echo "#   'exit'        -- message emitted, then exit with non-zero status"
                echo "#   'throw'       -- exception thrown, which contains the message"
            fi
            echo "rmc_assertions   abort"

            echo
            echo
            echo "#----------------------------------"
            echo "#         Additional software"
            echo "#----------------------------------"
            echo

            if [ "$show_instructions" != "" ]; then
                echo "# These directives all take the same kinds of arguments:"
                echo "#   'no'          -- ROSE should not use this software"
                echo "#   'system'      -- Use the publicly installed version; a.k.a. 'yes'"
                echo "#   directory     -- Look in the directory for includes and libs"
                echo "#   file          -- Use the specified file (not for libraries)"
                echo "#   vesion        -- Look for a particular version"
                echo "#   version base  -- Same, but use specified base directory"
                echo "# If a version is specified without a base directory then this"
                echo "# script searches certain well-known locations. Versioned software"
                echo "# directories follow a specific naming scheme which incorporates"
                echo "# information about their dependencies, therefore specifying software"
                echo "# by version number is the safest way to make sure all software is"
                echo "# configured consistently."
                echo
            fi
            echo "rmc_boost        1.50"
            echo "rmc_cmake        system"
            echo "rmc_dlib         18.17"
            echo "rmc_doxygen      system"
            echo "rmc_edg          4.9"
            echo "rmc_magic        system"
            echo "rmc_python       /usr/bin/python3"
            echo "rmc_qt           no"
            echo "rmc_readline     system"
            echo "rmc_sqlite       system"
            echo "rmc_wt           3.3.4"
            echo "rmc_yaml         0.5.1"
            echo "rmc_yices        1.0.34"
        ) >"$CONFIG_BASE_NAME"
    fi
    ${EDITOR-vi} "$CONFIG_BASE_NAME"
    do_shell true || exit 1
}

########################################################################################################################
#                         ____             __ _
#                        / ___|___  _ __  / _(_) __ _
#                       | |   / _ \| '_ \| |_| |/ _` |
#                       | |__| (_) | | | |  _| | (_| |
#                        \____\___/|_| |_|_| |_|\__, |
#                                               |___/
#
########################################################################################################################


# Subcommand to configure the build directory (autoconf, cmake, etc)
#
#   config [--dry-run]
#      Runs the cmake or autoconf commands in order to build the
#      ROSE makefiles and populate the subdirectories in the build
#      tree.
#

do_config() {
    local cmd dry_run
    while [ "$#" -gt 0 ]; do
        case "$1" in
            --dry-run)
                dry_run="--dry-run"
                shift
                ;;
            -*)
                echo "$arg0 $COMMAND: unknown switch: '$1'" >&2
                exit 1
                ;;
            *)
                break
                ;;
        esac
    done
    
    rmc_load_configuration

    case "$RMC_BUILD_SYSTEM" in
        autoconf)
            rmc_autoconf_run $dry_run
            ;;
        cmake)
            rmc_cmake_run $dry_run
            ;;

        *)
            echo "$arg0 $COMMAND: unknown build system: $RMC_BUILD_SYSTEM'" >&2
            exit 1
            ;;
    esac
}

########################################################################################################################
#                        __  __       _
#                       |  \/  | __ _| | _____
#                       | |\/| |/ _` | |/ / _ \
#                       | |  | | (_| |   <  __/
#                       |_|  |_|\__,_|_|\_\___|
#
########################################################################################################################

#   make[-WHAT] [SWITCHES] [TARGETS]
#      Runs "make" for each of the TARGETS sequentially in directories
#      specific to WHAT (or the CWD). For instance, saying "build-binary
#      clean all" runs "make clean" in all directories associated with
#      "binary", and then runs "make all" in those same directories.  The
#      same make switches are passed to each invocation of make (e.g., "-k").
do_make() {
    local where="$1"; shift
    rmc_load_configuration

    # Parse "make" switches, keeping track of a couple special ones.
    local make_switches=()
    local have_C have_j dry_run have_silent=--silent
    while [ "$#" -gt 0 ]; do
        case "$1" in
            --dry-run)
                # Steal this for ourselves. Users can still run "make"
                # the normal way if they really want --dry-run to be
                # for the "make" command.
                dry_run="--dry-run"
                shift
                ;;
            -C|--directory)
                make_switches=("${make_swithces[@]}" "$1" "$2")
                have_C="$1 $2"
                shift; shift
                ;;
            --directory=*)
                make_switches=("${make_switches[@]}" "$1")
                have_C="$1"
                shift
                ;;
            -j|--jobs)
                case "$2" in
                    [0-9]*[0-9])
                        have_j="$1 $2"
                        shift; shift
                        ;;
                    *)
                        have_j="$1"
                        shift
                        ;;
                esac
                ;;
            -j*)
                have_j="$1"
                shift
                ;;
            --jobs=*)
                have_j="$1"
                shift
                ;;
            --silent)
                have_silent=--silent
                shift
                ;;
            --no-silent)
                have_silent=
                shift
                ;;
            --debug|-f|--file|--makefile|-I|--include-dir|-l|--load-average|-o|--old-file|--assume-old|-O|--output-sync|-W|--what-if|--new-file|--assume-new)
                # These all take an argument
                make_switches=("${make_swithces[@]}" "$1" "$2")
                shift; shift
                ;;
            -*)
                # These take no arguments
                make_switches=("${make_switches[@]}" "$1")
                shift
                ;;
            *=*)
                # These are make variables, not targets
                make_switches=("${make_switches[@]}" "$1")
                shift
                ;;
            *)
                break
                ;;
        esac
    done
    local targets=("$@")
    if [ "${#targets[*]}" -eq 0 ]; then
        targets=(all)
    fi

    # Choose the directories were we'll run "make"
    local dirs=()
    case "$where" in
        binary)
            dirs=("-C $RMC_ROSEBLD_ROOT/src"
                  "-C $RMC_ROSEBLD_ROOT/tests/roseTests/binaryTests"
                  "-C $RMC_ROSEBLD_ROOT/projects/BinaryAnalysisTools"
                  "-C $RMC_ROSEBLD_ROOT/projects/simulator2"
                  "-C $RMC_ROSEBLD_ROOT/projects/BinaryCloneDetection"
            )
            ;;
        source)
            dirs=("-C $RMC_ROSEBLD_ROOT/src"
                  "-C $RMC_ROSEBLD_ROOT/tests/roseTests/PHPTests"
                  "-C $RMC_ROSEBLD_ROOT/tests/roseTests/ROSETTA"
                  "-C $RMC_ROSEBLD_ROOT/tests/roseTests/abstractMemoryObjectTests"
                  "-C $RMC_ROSEBLD_ROOT/tests/roseTests/astFileIOTests"
                  "-C $RMC_ROSEBLD_ROOT/tests/roseTests/astInliningTests"

                  # 2015-12-07
                  # rose_inputbuildVariableDeclaration.C fails
                  #"-C $RMC_ROSEBLD_ROOT/tests/roseTests/astInterfaceTests"

                  "-C $RMC_ROSEBLD_ROOT/tests/roseTests/astLValueTests"
                  "-C $RMC_ROSEBLD_ROOT/tests/roseTests/astMergeTests"

                  # 2015-12-07
                  # seq7a_test2001_01.C fails: for a function-style cast, remove the redundant "::A"
                  #"-C $RMC_ROSEBLD_ROOT/tests/roseTests/astOutliningTests"

                  "-C $RMC_ROSEBLD_ROOT/tests/roseTests/astPerformanceTests"
                  "-C $RMC_ROSEBLD_ROOT/tests/roseTests/astProcessingTests"

                  # 2015-12-07
                  # testQuery3_input1.C fails: assert numberOfStatementsInSimple == numberOfStatements
                  #"-C $RMC_ROSEBLD_ROOT/tests/roseTests/astQueryTestsTests"

                  "-C $RMC_ROSEBLD_ROOT/tests/roseTests/astRewriteTests"
                  "-C $RMC_ROSEBLD_ROOT/tests/roseTests/astSnippetTests"
                  "-C $RMC_ROSEBLD_ROOT/tests/roseTests/astSymbolTableTests"
                  "-C $RMC_ROSEBLD_ROOT/tests/roseTests/astTokenStreamTests"
                  "-C $RMC_ROSEBLD_ROOT/tests/roseTests/binaryTests"

                  # 2015-12-07
                  # fileLocation_test2001_01.C fails: cannot call constructor A::A directly
                  #"-C $RMC_ROSEBLD_ROOT/tests/roseTests/fileLocation_tests"

                  "-C $RMC_ROSEBLD_ROOT/tests/roseTests/graph_tests"
                  "-C $RMC_ROSEBLD_ROOT/tests/roseTests/loopProcessingTests"
                  "-C $RMC_ROSEBLD_ROOT/tests/roseTests/mergeTraversal_tests"

                  # 2015-12-07
                  # array-one.o: fails: segfault in Java runtime
                  #"-C $RMC_ROSEBLD_ROOT/tests/roseTests/ompLoweringTests"

                  # 2015-12-07
                  # test02-10 fails: "You didn't heed the BIG FAT WARNING from above!"
                  #"-C $RMC_ROSEBLD_ROOT/tests/roseTests/programAnalysisTests"

                  # 2015-12-07
                  # test2001_01.C fails: for a function-style cast, remove the redundant "::A"
                  #"-C $RMC_ROSEBLD_ROOT/tests/roseTests/programTransformationTests"

                  "-C $RMC_ROSEBLD_ROOT/tests/roseTests/roseHPCToolkitTests"

		  # 2015-12-07
		  # testQuery3_input.C: assert numberOfStatementsInSimple == numberOfStatements
                  #"-C $RMC_ROSEBLD_ROOT/tests/roseTests/utilTests"
            )
            ;;
                  
                  
        here)
            dirs=("")
            have_C=
            ;;
        lib)
            dirs=("-C $RMC_ROSEBLD_ROOT/src")
            ;;
        *)
            echo "$arg0 $COMMAND: unknown location: '$where'" >&2
            exit 1
            ;;
    esac
    if [ "$have_C" != "" ]; then
        echo "$arg0 $COMMAND: '$have_C' is incompatible with this command" >&2
        exit 1
    fi

    # Figure out the parallelism.  The "-j" etc. switches will override
    # the values from our own configuration files.
    local parallelism
    if [ "$have_j" != "" ]; then
        parallelism="$have_j"
    elif [ "$RMC_PARALLELISM" = "unlimited" ]; then
        parallelism="-j"
    else
        parallelism="-j$RMC_PARALLELISM"
    fi

    # Run "make" in each directory for each target.
    for target in "${targets[@]}"; do
        for dir in "${dirs[@]}"; do
            # Use --silent because ROSE's autoconf- and cmake-generated
            # maekfiles generally print their own output anyway. Otherwise
            # "make" is so noisy that warning messages tend to get overlooked
            rmc_execute $dry_run make $parallelism $have_silent "$dir" "${make_switches[@]}" "$target" \
                || exit 1
        done
    done
    return 0
}

########################################################################################################################
#                        __  __       _
#                       |  \/  | __ _(_)_ __
#                       | |\/| |/ _` | | '_ \
#                       | |  | | (_| | | | | |
#                       |_|  |_|\__,_|_|_| |_|
#
########################################################################################################################

command=
directory=
while [ "$#" -gt 0 ]; do
    case "$1" in
        -C)
            directory="$2"
            shift; shift
            ;;
        -*)
            echo "$arg0: unknown global switch: '$1'" >&2
            exit 1
            ;;
        *)
            COMMAND="$1"
            shift
            break
            ;;
    esac
done

if [ "$directory" != "" ]; then
    cd "$directory" || exit 1
fi

case "$COMMAND" in
    init)
        do_init "$@"
        ;;
    config)
        do_config "$@"
        ;;
    make)
        do_make "here" "$@"
        ;;
    make-*)
        do_make "${COMMAND#make-}" "$@"
        ;;
    shell)
        do_shell "$@"
        ;;
    resolve)
        do_resolve "$@"
        ;;
    "")
        do_shell
        ;;
    *)
        do_shell "$COMMAND" "$@"
        ;;
esac
