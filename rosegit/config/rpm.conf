# Configuration file for Robb's namespace "rpm"								;; -*- shell-script -*-
# Expand variables in $RG_CONFIGURE in case they aren't already
RG_CONFIGURE="$(eval echo $RG_CONFIGURE)"

# What compiler are we using?
if [ -n "$CXX" ]; then
    if [ "$CXX_VERSION" = "" ]; then
	echo "please set CXX_VERSION to something like 'gcc-4.8.1' (CXX=$CXX)" >&2
	exit 1
    fi
elif [ "$CXX_VERSION" != "" ]; then
    VERS=${CXX_VERSION##gcc-}
    CC_DIR="$HOME/GS-CAD/$CXX_VERSION/installed/bin"
    if [ ! -d "$CC_DIR" ]; then
	echo "cannot find compiler $CXX_VERSION in $CC_DIR" >&2
	exit 1
    fi
    export CC="$CC_DIR/gcc-$VERS"
    if [ ! -x "$CC" ]; then
	echo "cannot find C compiler $CC" >&2
	exit 1
    fi
    export CXX="$CC_DIR/g++-$VERS"
    if [ ! -x "$CXX" ]; then
	echo "cannot find C++ compiler $CXX" >&2
	exit 1
    fi
    export FC="$CC_DIR/gfortran-$VERS"
    if [ ! -x "$FC" ]; then
	echo "cannot find Fortran compiler $FC" >&2
	exit 1
    fi
else
    export CC=gcc CXX=g++ FC=gfortran
    export CXX_VERSION="gcc-$(gcc --version 2>/dev/null |head -n1 |perl -pe 's/.*(\d+\.\d+\.\d+)$/$1/')"
fi

# libjvm.so, needed unless we add "--without-java".  If we can't find libjvm.so then add --without-java.
# ROSE apparently needs Sun's version of Java.
JAVA_HOME=/usr/lib/jvm/java-7-sun
if [ -d "$JAVA_HOME" ]; then
    RG_CONFIGURE=$(eval args-adjust del --without-java $RG_CONFIGURE)
    RG_CONFIGURE=$(eval args-adjust --with-java=$JAVA_HOME $RG_CONFIGURE)
    LIBJVM_DIR=$JAVA_HOME/jre/lib/amd64/server
    if [ -r "$LIBJVM_DIR/libjvm.so" ]; then
	eval $(path-adjust --var=LD_LIBRARY_PATH insert $LIBJVM_DIR)
    fi
fi

# Locally-installed versions of BOOST
if [ "$BOOST_ROOT" = "" ]; then
    export BOOST_VERSION=${BOOST_VERSION:-1.47}
    export BOOST_ROOT="$HOME/GS-CAD/boost/$BOOST_VERSION/$CXX_VERSION/release"
    if [ ! -d "$BOOST_ROOT" ]; then
	echo "cannot find boost at $BOOST_ROOT" >&2
	exit 1
    fi
fi
if [ "$BOOST_ROOT" != "" ]; then
    export BOOST_VERSION=$(sed -n '/^#.*BOOST_LIB_VERSION /s/.*"\(.*\)".*/\1/p' < $BOOST_ROOT/include/boost/version.hpp |tr _ .)
    RG_CONFIGURE=$(eval args-adjust --with-boost=$BOOST_ROOT $RG_CONFIGURE)
    RG_CMAKE=$(eval args-adjust -DBOOST_ROOT=$BOOST_ROOT $RG_CMAKE)
fi

# Add Wt (web toolkit) support
if [ -d $HOME/GS-CAD/wt/wt-3.3.3/include ]; then
    export WT_ROOT="$HOME/GS-CAD/wt/wt-3.3.3"
    RG_CONFIGURE=$(eval args-adjust --with-wt=$WT_ROOT $RG_CONFIGURE)
    RG_CMAKE=$(eval args-adjust -DWT_ROOT=$WT_ROOT $RG_CMAKE)
fi

# Add libmagic support
RG_CONFIGURE=$(eval args-adjust --with-magic $RG_CONFIGURE)
RG_CMAKE=$(eval args-adjust -DMAGIC=FIXME_FIXME_FIXME $RG_CMAKE)

# Add libyaml-cpp support
if [ -d $HOME/GS-CAD/yaml-cpp-0.5.1/include ]; then
    export LIBYAML_ROOT="$HOME/GS-CAD/yaml-cpp-0.5.1"
    RG_CONFIGURE=$(eval args-adjust --with-yaml=$LIBYAML_ROOT $RG_CONFIGURE)
    RG_CMAKE=$(eval args-adjust -DLIBYAML_ROOT=$LIBYAML_ROOT $RG_CMAKE)
fi

# Add dlib support (http://dlib.net)
if [ -d $HOME/GS-CAD/dlib-18.10 ]; then
    export DLIB_ROOT="$HOME/GS-CAD/dlib-18.10"
    RG_CONFIGURE=$(eval args-adjust --with-dlib=$DLIB_ROOT $RG_CONFIGURE)
fi

# Add python support
if [ -e /usr/bin/python3 ]; then
    export PYTHON=/usr/bin/python3
    RG_CONFIGURE=$(eval args-adjust --with-python=$PYTHON $RG_CONFIGURE)
    #RG_CONFIGURE=$(eval args-adjust --enable-python $RG_CONFIGURE)
fi

# Set make parallelism to a lower value unless we're using distcc or ccache
using_distcc=
if (which g++ | grep ccache >/dev/null); then
    if [ "$CCACHE_PREFIX" = "distcc" ]; then
        using_distcc=yes
    fi
elif [ "$DISTCC_HOSTS" != "" ]; then
    using_distcc=yes
fi
nprocs=$(sed -n '/^processor[ \t]*:/p' /proc/cpuinfo |wc -l)
[ -n "$nprocs" ] || nprocs=1
[ -n "$using_distcc" ] && nprocs=$[nprocs * 3];
RG_MAKE="make -j$nprocs"

# Add support for the Yices SMT solver if present.
for d in \
    $HOME/GS-CAD/SMT-solvers/yices-1.0.34 \
    $HOME/GS-CAD/SMT-solvers/yices-1.0.28
do
    if [ -d $d ]; then
	RG_CONFIGURE=$(eval args-adjust --with-yices=$d $RG_CONFIGURE)
	break
    fi
done

# Turn off warnings about deprecated headers
#RG_CONFIGURE=$(eval args-adjust --with-CXX_WARNINGS+=-Wno-deprecated $RG_CONFIGURE)

# I'm getting tired of seeing warnings about deprecated headers included by boost, so I'm turning them all off.
RG_CONFIGURE=$(eval args-adjust --with-C_WARNINGS+='-Wno-deprecated' $RG_CONFIGURE)
RG_CONFIGURE=$(eval args-adjust --with-CXX_WARNINGS+='-Wno-deprecated' $RG_CONFIGURE)

#--------------------------------- other repositories -----------------------------------------

# The developerScratchSpace repository
if [ "$RG_SRC" != "$ROSE_SRC" ]; then
    RG_CONFIGURE=$(eval args-adjust --prefix=$ROSE_SRC/_build/installed $RG_CONFIGURE)

    # MySQL needs a directory name because rose.h includes <mysql.h> rather than <mysql/mysql.h>
    # Unfortunately we can't add it to --with-CXXFLAGS because it won't make it into the Makefiles
    RG_CONFIGURE=$(eval args-adjust --with-C_WARNINGS+=-I/usr/include/mysql $RG_CONFIGURE)
    RG_CONFIGURE=$(eval args-adjust --with-CXX_WARNINGS+=-I/usr/include/mysql $RG_CONFIGURE)
fi

# Keep GCC from emitting non-printable characters in diagnostics
export LC_ALL="C"
