# Configuration file for Robb's namespace "rpm"								;; -*- shell-script -*-
# Expand variables in $RG_CONFIGURE in case they aren't already
RG_CONFIGURE="$(eval echo $RG_CONFIGURE)"

# libjvm.so, needed unless we add "--without-java".  If we can't find libjvm.so then add --without-java.
# ROSE apparently needs Sun's version of Java.
JAVA_HOME=/usr/lib/jvm/java-7-sun
if [ -d "$JAVA_HOME" ]; then
    RG_CONFIGURE=$(eval args-adjust del --without-java $RG_CONFIGURE)
    RG_CONFIGURE=$(eval args-adjust --with-java=$JAVA_HOME $RG_CONFIGURE)
    LIBJVM_DIR=$JAVA_HOME/jre/lib/amd64/server
    if [ -r "$LIBJVM_DIR/libjvm.so" ]; then
	eval $(path-adjust --var=LD_LIBRARY_PATH insert $LIBJVM_DIR)
    fi
fi

# Locally-installed versions of BOOST
#RG_CONFIGURE=$(eval args-adjust --enable-boost-version-check=no $RG_CONFIGURE)
for d in \
    /Users/dquinlan/local/boost_1_42_0_installTree-gxx-4.0.1                  '#Darwin' \
    /export/tmp.hudson-rose/opt/boost_1_40_0-inst                             '#hudson-rose-07' \
    $HOME/GS-CAD/boost1.47 \
    $HOME/GS-CAD/boost1.46
do
    if [ -d "$d" ]; then
	export BOOST_ROOT="$d"
	export BOOST_VERSION=$(sed -n '/^#.*BOOST_LIB_VERSION /s/.*"\(.*\)".*/\1/p' < $d/include/boost/version.hpp |tr _ .)
	# Added to RG_CONFIGURE after we possibly append "-debug" to $BOOST_ROOT below.
	break
    fi
done
RG_CONFIGURE=$(eval args-adjust --with-boost=$BOOST_ROOT $RG_CONFIGURE)
RG_CMAKE=$(eval args-adjust -DBOOST_ROOT=$BOOST_ROOT $RG_CMAKE)

# Add Wt (web toolkit) support
if [ -d $HOME/GS-CAD/wt/wt-3.3.3/include ]; then
    export WT_ROOT="$HOME/GS-CAD/wt/wt-3.3.3"
    RG_CONFIGURE=$(eval args-adjust --with-wt=$WT_ROOT $RG_CONFIGURE)
    RG_CMAKE=$(eval args-adjust -DWT_ROOT=$WT_ROOT $RG_CMAKE)
fi

# Add dlib support (http://dlib.net)
if [ -d $HOME/GS-CAD/dlib-18.10 ]; then
    export DLIB_ROOT="$HOME/GS-CAD/dlib-18.10"
    RG_CONFIGURE=$(eval args-adjust --with-dlib=$DLIB_ROOT $RG_CONFIGURE)
fi

# Set make parallelism to a lower value unless we're using distcc or ccache
using_distcc=
if (which g++ | grep ccache >/dev/null); then
    if [ "$CCACHE_PREFIX" = "distcc" ]; then
        using_distcc=yes
    fi
elif [ "$DISTCC_HOSTS" != "" ]; then
    using_distcc=yes
fi
nprocs=$(sed -n '/^processor[ \t]*:/p' /proc/cpuinfo |wc -l)
[ -n "$nprocs" ] || nprocs=1
[ -n "$using_distcc" ] && nprocs=$[nprocs * 3];
RG_MAKE="make -j$nprocs"

## Add DWARF support
#: ${DWARF_HOME:=$HOME/GS-CAD/dwarfutils-20100214/libdwarf}
#RG_CONFIGURE=$(eval args-adjust --with-dwarf=$DWARF_HOME $RG_CONFIGURE)
#eval $(path-adjust --var=LD_LIBRARY_PATH $DWARF_HOME)

# Add support for the Yices SMT solver if present.
for d in \
    $HOME/GS-CAD/SMT-solvers/yices-1.0.34 \
    $HOME/GS-CAD/SMT-solvers/yices-1.0.28
do
    if [ -d $d ]; then
	RG_CONFIGURE=$(eval args-adjust --with-yices=$d $RG_CONFIGURE)
	break
    fi
done

# Turn off warnings about deprecated headers
#RG_CONFIGURE=$(eval args-adjust --with-CXX_WARNINGS+=-Wno-deprecated $RG_CONFIGURE)

# I'm getting tired of seeing warnings about deprecated headers included by boost, so I'm turning them all off.
RG_CONFIGURE=$(eval args-adjust --with-C_WARNINGS+='-Wno-deprecated' $RG_CONFIGURE)
RG_CONFIGURE=$(eval args-adjust --with-CXX_WARNINGS+='-Wno-deprecated' $RG_CONFIGURE)

#--------------------------------- other repositories -----------------------------------------

# The developerScratchSpace repository
if [ "$RG_SRC" != "$ROSE_SRC" ]; then
    RG_CONFIGURE=$(eval args-adjust --prefix=$ROSE_SRC/_build/installed $RG_CONFIGURE)

    # MySQL needs a directory name because rose.h includes <mysql.h> rather than <mysql/mysql.h>
    # Unfortunately we can't add it to --with-CXXFLAGS because it won't make it into the Makefiles
    RG_CONFIGURE=$(eval args-adjust --with-C_WARNINGS+=-I/usr/include/mysql $RG_CONFIGURE)
    RG_CONFIGURE=$(eval args-adjust --with-CXX_WARNINGS+=-I/usr/include/mysql $RG_CONFIGURE)
fi

# Keep GCC from emitting non-printable characters in diagnostics
export LC_ALL="C"
