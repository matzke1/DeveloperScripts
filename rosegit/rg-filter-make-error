#!/usr/bin/perl
#
# Purpose: reads GNU make(1) results from standard input and looks for errors. It then prints the part of the output
# that's relevant to the error, based on "Entering directory" and "Leaving directory" messages and correctly handling
# recursion.
use strict;

my @stack = ({dirname=>"", output=>"", error=>undef});
my $ignore_errors = undef; # used to suppress messsages as we unwind the stack after an error
my $show_progress = undef; # if true then show certain make output

sub show_errors {
  my($level) = @_;
  if ($stack[$level]{error}) {
    print "===============================================================================\n";
    print "=== Error detected in this section of the output                            ===\n";
    print "===============================================================================\n";
    print $stack[$level]{output};
    $ignore_errors = $level; # ignore errors below this recursion level
  } else {
    $ignore_errors = $level if defined $ignore_errors;
  }
}

# Parse command-line switches
while (@ARGV) {
  local($_) = shift @ARGV;
  if (/^--progress$/) {
    $show_progress = 1;
  } else {
    die "usage: make | $0 [--progress]\n";
  }
}

while (<STDIN>) {
  if ($show_progress) {
    if (/^  [A-Z][A-Z_0-9]+\s+\S+/) {
      print $_; # print lines like "COMPILE rose_paths.lo" and "LINK librose.la"
    } elsif (/warning:/) {
      print $_; # compiler warnings
    }
  }

  if (my($level,$dir) = /^make\[(\d+)\]: Entering directory `(.*)'/) {
    $stack[$level] = {dirname=>$dir, output=>$_, error=>undef};
    if ($level>0) {
      my $prefix = $stack[$level-1]{dirname} . "/";
      my $subdir = $dir;
      if ($prefix eq substr $dir, 0, 1+length $stack[$level-1]{dirname}) {
	$subdir = substr $dir, 1+length $stack[$level-1]{dirname};
      }
      $stack[$level-1]{output} .= "    [Note: suppressed output from recursive make.]\n";
    }
  } elsif (my($level) = /^make\[(\d+)\]: Leaving directory/) {
    $stack[$level]{output} .= $_ . "\n";
    show_errors($level);
    splice @stack, $level; # rather than pop, in case we missed a "Leaving directory" message
  } elsif (my($level) = /^make(?:\[(\d+)\])?: \*\*\*/) {
    # Error detected, but don't count as an error if we've reported it already at a higher level
    if (!defined($ignore_errors) || $level >= $ignore_errors) {
      $ignore_errors = undef;
      $stack[$level]{error} .= $_;
    }
    $stack[$level]{output} .= $_;
  } else {
    my $level = @stack ? @stack-1 : 0;
    $stack[$level]{output} .= $_;
  }
}

show_errors(0);
